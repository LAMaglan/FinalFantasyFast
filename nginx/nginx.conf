user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Define an upstream block for the backend service
    upstream backend {
        # Point to the backend service within the Docker network
        server backend:8000;
    }

    server {
        listen 80;

        ### server or public IP (if not running locally) ##
        # server_name your-domain.com
        # return 301 https://$host$request_uri;
        ###

        # Location block for proxying API requests to the backend service
        location /api {
            # Proxying to the backend service defined above
            proxy_pass http://backend;
            # Note: $host is the host header from an HTTP request (e.g. to https://localhost/)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            # Path where the frontend static files are located
            root /usr/share/nginx/html;
            # Fallback to index.html for client-side routing
            try_files $uri /index.html;

            # adjust as necessary if deployed remotely
            # somethin like this:
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}